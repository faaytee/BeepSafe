// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

 generator client {
   provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id  Int @id @default(autoincrement()) 
  firstName String
  lastName String
  email String @unique
  password String
  isVerified Boolean @default(false)
  verificationToken String?

   // Password Reset
  resetToken         String?
  resetTokenExpiry   BigInt?


  reports Report[]
  invites            Invite[]
  trustedCircle TrustedCircle[]
  // Timestamps
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Report{
  id Int @id @default(autoincrement())
  title String
  description String
  location String
  latitude    Float?   // New field: Latitude of the incident
  longitude   Float?   // New field: Longitude of the incident
  userId Int
  user User @relation(fields: [userId], references: [id]) 
  // Timestamps
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}


model NewsletterSubscriber {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  isConfirmed  Boolean  @default(true)
  createdAt    DateTime @default(now())
}

model ContactMessage {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  subject     String
  message     String
  createdAt   DateTime @default(now())
}

model Invite {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model TrustedCircle{
  id Int @id  @default(autoincrement())
  firstName String
  lastName String
  phoneNumber String
  email String @unique
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model SecurityAgency {
  id        Int      @id @default(autoincrement())
  state     String
  type      String
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())

  @@index([state])
  @@index([type])
}