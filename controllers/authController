const AppError = require("../error/AppError");
const { PrismaClient } = require("@prisma/client");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const prisma = new PrismaClient();
const { mail } = require("./sendMail");

const signup = async (req, res, next) => {
  try {
    console.log("Raw request body:", req.body);
    const { firstName, lastName, email, password } = req.body;
    console.log("Destructured values:", { firstName, lastName, email, password });

    // Log the truthiness of each field
    console.log("Field checks:", {
      firstNameExists: !!firstName,
      lastNameExists: !!lastName,
      emailExists: !!email,
      passwordExists: !!password,
      firstNameEmpty: firstName ? firstName.trim() === "" : true,
      lastNameEmpty: lastName ? lastName.trim() === "" : true,
      emailEmpty: email ? email.trim() === "" : true,
      passwordEmpty: password ? password.trim() === "" : true,
    });

    // Updated validation
    if (
      firstName === undefined ||
      lastName === undefined ||
      email === undefined ||
      password === undefined ||
      (firstName && firstName.trim() === "") ||
      (lastName && lastName.trim() === "") ||
      (email && email.trim() === "") ||
      (password && password.trim() === "")
    ) {
      return next(new AppError("missing or empty fields", 400));
    }


    // âœ… Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return next(new AppError("Invalid email format", 400));
    }


    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) return next(new AppError("email already exist", 400));

    const hashedPassword = await bcrypt.hash(password, 10);

    const verificationToken = jwt.sign({ email }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });

    const addUser = await prisma.user.create({
      data: {
        firstName,
        lastName,
        email,
        password: hashedPassword,
        verificationToken,
      },
    });

    const verificationLink = `http://localhost:3000/api/verifyEmail?token=${verificationToken}`;
    console.log("Token:", verificationToken);

    const subject = "Verify your email";
    const htmlContent = `<p>Click the link below to verify your email:</p><a href="${verificationLink}">${verificationLink}</a>`;

    console.log("Sending email to:", addUser.email);

    await mail(addUser.email, subject, htmlContent);

    res.status(201).json({
      message: "verification mail sent. Please check inbox",
      user: {
        id: addUser.id,
        firstName: addUser.firstName,
        lastName: addUser.lastName,
        email: addUser.email,
      },
    });
  } catch (error) {
    console.error(error);
    next(error);
  }
};

const verifyEmail = async (req, res) => {
  try {
    const { token } = req.query;

    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    const user = await prisma.user.findUnique({
      where: { email: decoded.email },
    });

    if (!user) return res.status(404).json({ message: "User not found" });
    if (user.isVerified)
      return res.status(400).json({ message: "Already verified" });
    if (user.verificationToken !== token) {
      return res.status(400).json({ message: "Invalid verification token" });
    }

    await prisma.user.update({
      where: { email: decoded.email },
      data: { isVerified: true, verificationToken: null },
    });

    res.status(200).json({ message: "Email successfully verified" });
  } catch (err) {
    if (err.name === "TokenExpiredError") {
      return res
        .status(400)
        .json({ message: "Verification link expired, please signin again" });
    }
    res.status(400).json({ message: "Invalid or expired token" });
  }
};

const login = async (req, res, next) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) return next(new AppError("missing fields", 400));

    const user = await prisma.user.findUnique({ where: { email } });

    if (!user) return next(new AppError("invalid email"));

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return next(new AppError("invalid password"));

    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });
    res.status(200).json({
      message: "logged in successfully",
      user: {
        id: user.id,
        firstname: user.firstName,
        lastName: user.lastName,
        email: user.email,
      },
      token,
    });
  } catch (error) {
    console.error(error);
    next(error);
  }
};


const forgotPassword = async (req, res, next) => {
  try {
    const { email } = req.body;

    if (!email) {
      return next(new AppError("Email is required", 400));
    }

    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return next(new AppError("User not found", 404));
    }

    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    const expiry = Date.now() + 60 * 60 * 1000;

    const updatedUser = await prisma.user.update({
      where: { email },
      data: {
        resetToken: token,
        resetTokenExpiry: BigInt(expiry),
      },
    });

    console.log("Updated user with reset token:", {
      email: updatedUser.email,
      resetToken: updatedUser.resetToken,
      resetTokenExpiry: updatedUser.resetTokenExpiry,
    });

    const resetLink = `${process.env.BASE_URL}/api/reset-password?token=${token}`;

    const subject = "Password Reset Request";
    const htmlContent = `<p>Click the link below to reset your password:</p><a href="${resetLink}">${resetLink}</a>`;

    await mail(email, subject, htmlContent);

    res.status(200).json({ message: "Password reset link sent to your email" });
  } catch (error) {
    console.error(error);
    next(error);
  }
};

// Add the resetPassword function here
const resetPassword = async (req, res, next) => {
  try {
    const { token, newPassword } = req.body;

    if (!token || !newPassword) {
      return next(new AppError("Token and new password are required", 400));
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
    });

    console.log("User fetched for reset:", {
      id: user?.id,
      email: user?.email,
      resetToken: user?.resetToken,
      resetTokenExpiry: user?.resetTokenExpiry,
      providedToken: token,
      currentTime: BigInt(Date.now()),
      tokenMatches: user ? user.resetToken === token : false,
      tokenExpired: user ? user.resetTokenExpiry < BigInt(Date.now()) : true,
    });

    if (!user || user.resetToken !== token || user.resetTokenExpiry < BigInt(Date.now())) {
      return next(new AppError("Invalid or expired token", 400));
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);

    await prisma.user.update({
      where: { id: user.id },
      data: {
        password: hashedPassword,
        resetToken: null,
        resetTokenExpiry: null,
      },
    });

    res.status(200).json({ message: "Password reset successfully" });
  } catch (error) {
    console.error(error);
    next(error);
  }
};

module.exports = { signup, login, verifyEmail, forgotPassword, resetPassword };

const logout = (req, res, next) => {
  res.status(201).json({
    message: "logout successful",
  });
};

module.exports = { signup, login, verifyEmail, logout };
faaytee/main
